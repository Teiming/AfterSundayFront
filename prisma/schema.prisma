generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model event_info_link {
  info_id     BigInt    @id @default(autoincrement())
  event_id    BigInt?
  link_url    String?
  uploaded_at DateTime? @default(now()) @db.Timestamptz(6)
  events      events?   @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: NoAction)
}

model event_participants {
  participant_id BigInt    @id @default(autoincrement())
  event_id       BigInt?
  user_id        BigInt?
  status         String?   @default("pending") @db.VarChar(20)
  joined_at      DateTime? @default(now()) @db.Timestamptz(6)
  events         events?   @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: NoAction)
  users          users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([event_id, user_id])
  @@index([event_id], map: "idx_participants_event_id")
}

model events {
  event_id           BigInt               @id @default(autoincrement())
  host_id            BigInt?
  title              String               @db.VarChar(100)
  description        String?
  location           String?              @db.VarChar(200)
  open_chat_link     String?
  start_time         DateTime             @db.Timestamptz(6)
  end_time           DateTime             @db.Timestamptz(6)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  event_info_link    event_info_link[]
  event_participants event_participants[]
  users              users?               @relation(fields: [host_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  images             images[]

  @@index([start_time], map: "idx_events_start_time")
}

model images {
  image_id    BigInt    @id @default(autoincrement())
  event_id    BigInt?
  file_name   String?   @db.VarChar(255)
  file_url    String?
  uploaded_at DateTime? @default(now()) @db.Timestamptz(6)
  events      events?   @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id            BigInt               @id @default(autoincrement())
  username           String               @db.VarChar(50)
  email              String               @unique @db.VarChar(100)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  event_participants event_participants[]
  events             events[]
}
